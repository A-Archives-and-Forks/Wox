syntax = "proto3";

package wox.plugin;

option go_package = "wox/plugin";

import "common.proto";
import "api.proto";

// Core plugin interface definition
service Plugin {
  // Initialize the plugin
  rpc Init(PluginInitContext) returns (Empty) {}
  // Handle search query
  rpc Query(PluginQueryContext) returns (QueryResponse) {}
}

// System plugin interface definition
service SystemPlugin {
  // Get plugin metadata
  rpc GetMetadata(Empty) returns (Metadata) {}
}

message PluginInitContext {
  Context context = 1;
  PluginInitParams params = 2;
}

message PluginQueryContext {
  Context context = 1;
  Query query = 2;
}

message Context {
  string trace_id = 1;
}

message PluginInitParams {
  PublicAPIClient api = 1;
  string plugin_directory = 2;
}

message PublicAPIClient {
  // This is a placeholder for the PublicAPI service client
  // The actual client will be generated by the gRPC compiler
  string client_id = 1;
}

message Query {
  enum QueryType {
    INPUT = 0;
    SELECTION = 1;
  }
  QueryType type = 1;
  string raw_query = 2;
  string trigger_keyword = 3;
  string command = 4;
  string search = 5;
  Selection selection = 6;
  QueryEnv env = 7;
}

message QueryResponse {
  repeated Result results = 1;
}

message Result {
  string id = 1;
  string title = 2;
  string subtitle = 3;
  WoxImage icon = 4;
  WoxPreview preview = 5;
  double score = 6;
  string group = 7;
  double group_score = 8;
  repeated ResultTail tails = 9;
  string context_data = 10;
  repeated ResultAction actions = 11;
  int32 refresh_interval = 12;
}

message Metadata {
  string id = 1;
  string name = 2;
  string description = 3;
  string author = 4;
  string version = 5;
  string website = 6;
  string icon = 7;
  repeated string supported_features = 8;
  repeated MetadataCommand commands = 9;
  repeated MetadataSetting settings = 10;
} 