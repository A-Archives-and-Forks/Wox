// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: plugin/api.proto

package plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PublicAPI_ChangeQuery_FullMethodName           = "/wox.plugin.PublicAPI/ChangeQuery"
	PublicAPI_HideApp_FullMethodName               = "/wox.plugin.PublicAPI/HideApp"
	PublicAPI_ShowApp_FullMethodName               = "/wox.plugin.PublicAPI/ShowApp"
	PublicAPI_Notify_FullMethodName                = "/wox.plugin.PublicAPI/Notify"
	PublicAPI_Log_FullMethodName                   = "/wox.plugin.PublicAPI/Log"
	PublicAPI_GetTranslation_FullMethodName        = "/wox.plugin.PublicAPI/GetTranslation"
	PublicAPI_GetSetting_FullMethodName            = "/wox.plugin.PublicAPI/GetSetting"
	PublicAPI_SaveSetting_FullMethodName           = "/wox.plugin.PublicAPI/SaveSetting"
	PublicAPI_RegisterQueryCommands_FullMethodName = "/wox.plugin.PublicAPI/RegisterQueryCommands"
	PublicAPI_AIChatStream_FullMethodName          = "/wox.plugin.PublicAPI/AIChatStream"
	PublicAPI_OnSettingChanged_FullMethodName      = "/wox.plugin.PublicAPI/OnSettingChanged"
	PublicAPI_OnGetDynamicSetting_FullMethodName   = "/wox.plugin.PublicAPI/OnGetDynamicSetting"
	PublicAPI_OnDeepLink_FullMethodName            = "/wox.plugin.PublicAPI/OnDeepLink"
	PublicAPI_OnUnload_FullMethodName              = "/wox.plugin.PublicAPI/OnUnload"
)

// PublicAPIClient is the client API for PublicAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// API interface for plugin to interact with Wox
type PublicAPIClient interface {
	// Change the query in search box
	ChangeQuery(ctx context.Context, in *ChangeQueryRequest, opts ...grpc.CallOption) (*Empty, error)
	// Hide Wox window
	HideApp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Show Wox window
	ShowApp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	// Show notification
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*Empty, error)
	// Log message
	Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Empty, error)
	// Get translation
	GetTranslation(ctx context.Context, in *TranslationRequest, opts ...grpc.CallOption) (*TranslationResponse, error)
	// Get setting value
	GetSetting(ctx context.Context, in *SettingRequest, opts ...grpc.CallOption) (*SettingResponse, error)
	// Save setting value
	SaveSetting(ctx context.Context, in *SaveSettingRequest, opts ...grpc.CallOption) (*Empty, error)
	// Register query commands
	RegisterQueryCommands(ctx context.Context, in *RegisterQueryCommandsRequest, opts ...grpc.CallOption) (*Empty, error)
	// AI chat stream
	AIChatStream(ctx context.Context, in *AIChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AIChatResponse], error)
	// Register setting changed callback
	OnSettingChanged(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SettingChangedEvent], error)
	// Register dynamic setting callback
	OnGetDynamicSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DynamicSettingEvent], error)
	// Register deep link callback
	OnDeepLink(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeepLinkEvent], error)
	// Register unload callback
	OnUnload(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UnloadEvent], error)
}

type publicAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewPublicAPIClient(cc grpc.ClientConnInterface) PublicAPIClient {
	return &publicAPIClient{cc}
}

func (c *publicAPIClient) ChangeQuery(ctx context.Context, in *ChangeQueryRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PublicAPI_ChangeQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) HideApp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PublicAPI_HideApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) ShowApp(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PublicAPI_ShowApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PublicAPI_Notify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) Log(ctx context.Context, in *LogRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PublicAPI_Log_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetTranslation(ctx context.Context, in *TranslationRequest, opts ...grpc.CallOption) (*TranslationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TranslationResponse)
	err := c.cc.Invoke(ctx, PublicAPI_GetTranslation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) GetSetting(ctx context.Context, in *SettingRequest, opts ...grpc.CallOption) (*SettingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SettingResponse)
	err := c.cc.Invoke(ctx, PublicAPI_GetSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) SaveSetting(ctx context.Context, in *SaveSettingRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PublicAPI_SaveSetting_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) RegisterQueryCommands(ctx context.Context, in *RegisterQueryCommandsRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PublicAPI_RegisterQueryCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *publicAPIClient) AIChatStream(ctx context.Context, in *AIChatRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[AIChatResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicAPI_ServiceDesc.Streams[0], PublicAPI_AIChatStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AIChatRequest, AIChatResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicAPI_AIChatStreamClient = grpc.ServerStreamingClient[AIChatResponse]

func (c *publicAPIClient) OnSettingChanged(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SettingChangedEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicAPI_ServiceDesc.Streams[1], PublicAPI_OnSettingChanged_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, SettingChangedEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicAPI_OnSettingChangedClient = grpc.ServerStreamingClient[SettingChangedEvent]

func (c *publicAPIClient) OnGetDynamicSetting(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DynamicSettingEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicAPI_ServiceDesc.Streams[2], PublicAPI_OnGetDynamicSetting_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, DynamicSettingEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicAPI_OnGetDynamicSettingClient = grpc.ServerStreamingClient[DynamicSettingEvent]

func (c *publicAPIClient) OnDeepLink(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DeepLinkEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicAPI_ServiceDesc.Streams[3], PublicAPI_OnDeepLink_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, DeepLinkEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicAPI_OnDeepLinkClient = grpc.ServerStreamingClient[DeepLinkEvent]

func (c *publicAPIClient) OnUnload(ctx context.Context, in *Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[UnloadEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PublicAPI_ServiceDesc.Streams[4], PublicAPI_OnUnload_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Empty, UnloadEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicAPI_OnUnloadClient = grpc.ServerStreamingClient[UnloadEvent]

// PublicAPIServer is the server API for PublicAPI service.
// All implementations must embed UnimplementedPublicAPIServer
// for forward compatibility.
//
// API interface for plugin to interact with Wox
type PublicAPIServer interface {
	// Change the query in search box
	ChangeQuery(context.Context, *ChangeQueryRequest) (*Empty, error)
	// Hide Wox window
	HideApp(context.Context, *Empty) (*Empty, error)
	// Show Wox window
	ShowApp(context.Context, *Empty) (*Empty, error)
	// Show notification
	Notify(context.Context, *NotifyRequest) (*Empty, error)
	// Log message
	Log(context.Context, *LogRequest) (*Empty, error)
	// Get translation
	GetTranslation(context.Context, *TranslationRequest) (*TranslationResponse, error)
	// Get setting value
	GetSetting(context.Context, *SettingRequest) (*SettingResponse, error)
	// Save setting value
	SaveSetting(context.Context, *SaveSettingRequest) (*Empty, error)
	// Register query commands
	RegisterQueryCommands(context.Context, *RegisterQueryCommandsRequest) (*Empty, error)
	// AI chat stream
	AIChatStream(*AIChatRequest, grpc.ServerStreamingServer[AIChatResponse]) error
	// Register setting changed callback
	OnSettingChanged(*Empty, grpc.ServerStreamingServer[SettingChangedEvent]) error
	// Register dynamic setting callback
	OnGetDynamicSetting(*Empty, grpc.ServerStreamingServer[DynamicSettingEvent]) error
	// Register deep link callback
	OnDeepLink(*Empty, grpc.ServerStreamingServer[DeepLinkEvent]) error
	// Register unload callback
	OnUnload(*Empty, grpc.ServerStreamingServer[UnloadEvent]) error
	mustEmbedUnimplementedPublicAPIServer()
}

// UnimplementedPublicAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPublicAPIServer struct{}

func (UnimplementedPublicAPIServer) ChangeQuery(context.Context, *ChangeQueryRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeQuery not implemented")
}
func (UnimplementedPublicAPIServer) HideApp(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HideApp not implemented")
}
func (UnimplementedPublicAPIServer) ShowApp(context.Context, *Empty) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowApp not implemented")
}
func (UnimplementedPublicAPIServer) Notify(context.Context, *NotifyRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedPublicAPIServer) Log(context.Context, *LogRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedPublicAPIServer) GetTranslation(context.Context, *TranslationRequest) (*TranslationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTranslation not implemented")
}
func (UnimplementedPublicAPIServer) GetSetting(context.Context, *SettingRequest) (*SettingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSetting not implemented")
}
func (UnimplementedPublicAPIServer) SaveSetting(context.Context, *SaveSettingRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSetting not implemented")
}
func (UnimplementedPublicAPIServer) RegisterQueryCommands(context.Context, *RegisterQueryCommandsRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterQueryCommands not implemented")
}
func (UnimplementedPublicAPIServer) AIChatStream(*AIChatRequest, grpc.ServerStreamingServer[AIChatResponse]) error {
	return status.Errorf(codes.Unimplemented, "method AIChatStream not implemented")
}
func (UnimplementedPublicAPIServer) OnSettingChanged(*Empty, grpc.ServerStreamingServer[SettingChangedEvent]) error {
	return status.Errorf(codes.Unimplemented, "method OnSettingChanged not implemented")
}
func (UnimplementedPublicAPIServer) OnGetDynamicSetting(*Empty, grpc.ServerStreamingServer[DynamicSettingEvent]) error {
	return status.Errorf(codes.Unimplemented, "method OnGetDynamicSetting not implemented")
}
func (UnimplementedPublicAPIServer) OnDeepLink(*Empty, grpc.ServerStreamingServer[DeepLinkEvent]) error {
	return status.Errorf(codes.Unimplemented, "method OnDeepLink not implemented")
}
func (UnimplementedPublicAPIServer) OnUnload(*Empty, grpc.ServerStreamingServer[UnloadEvent]) error {
	return status.Errorf(codes.Unimplemented, "method OnUnload not implemented")
}
func (UnimplementedPublicAPIServer) mustEmbedUnimplementedPublicAPIServer() {}
func (UnimplementedPublicAPIServer) testEmbeddedByValue()                   {}

// UnsafePublicAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PublicAPIServer will
// result in compilation errors.
type UnsafePublicAPIServer interface {
	mustEmbedUnimplementedPublicAPIServer()
}

func RegisterPublicAPIServer(s grpc.ServiceRegistrar, srv PublicAPIServer) {
	// If the following call pancis, it indicates UnimplementedPublicAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PublicAPI_ServiceDesc, srv)
}

func _PublicAPI_ChangeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeQueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ChangeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_ChangeQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ChangeQuery(ctx, req.(*ChangeQueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_HideApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).HideApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_HideApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).HideApp(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_ShowApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).ShowApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_ShowApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).ShowApp(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).Log(ctx, req.(*LogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetTranslation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TranslationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetTranslation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetTranslation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetTranslation(ctx, req.(*TranslationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_GetSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).GetSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_GetSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).GetSetting(ctx, req.(*SettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_SaveSetting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSettingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).SaveSetting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_SaveSetting_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).SaveSetting(ctx, req.(*SaveSettingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_RegisterQueryCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterQueryCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PublicAPIServer).RegisterQueryCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PublicAPI_RegisterQueryCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PublicAPIServer).RegisterQueryCommands(ctx, req.(*RegisterQueryCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PublicAPI_AIChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AIChatRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicAPIServer).AIChatStream(m, &grpc.GenericServerStream[AIChatRequest, AIChatResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicAPI_AIChatStreamServer = grpc.ServerStreamingServer[AIChatResponse]

func _PublicAPI_OnSettingChanged_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicAPIServer).OnSettingChanged(m, &grpc.GenericServerStream[Empty, SettingChangedEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicAPI_OnSettingChangedServer = grpc.ServerStreamingServer[SettingChangedEvent]

func _PublicAPI_OnGetDynamicSetting_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicAPIServer).OnGetDynamicSetting(m, &grpc.GenericServerStream[Empty, DynamicSettingEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicAPI_OnGetDynamicSettingServer = grpc.ServerStreamingServer[DynamicSettingEvent]

func _PublicAPI_OnDeepLink_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicAPIServer).OnDeepLink(m, &grpc.GenericServerStream[Empty, DeepLinkEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicAPI_OnDeepLinkServer = grpc.ServerStreamingServer[DeepLinkEvent]

func _PublicAPI_OnUnload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PublicAPIServer).OnUnload(m, &grpc.GenericServerStream[Empty, UnloadEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PublicAPI_OnUnloadServer = grpc.ServerStreamingServer[UnloadEvent]

// PublicAPI_ServiceDesc is the grpc.ServiceDesc for PublicAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PublicAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wox.plugin.PublicAPI",
	HandlerType: (*PublicAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeQuery",
			Handler:    _PublicAPI_ChangeQuery_Handler,
		},
		{
			MethodName: "HideApp",
			Handler:    _PublicAPI_HideApp_Handler,
		},
		{
			MethodName: "ShowApp",
			Handler:    _PublicAPI_ShowApp_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _PublicAPI_Notify_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _PublicAPI_Log_Handler,
		},
		{
			MethodName: "GetTranslation",
			Handler:    _PublicAPI_GetTranslation_Handler,
		},
		{
			MethodName: "GetSetting",
			Handler:    _PublicAPI_GetSetting_Handler,
		},
		{
			MethodName: "SaveSetting",
			Handler:    _PublicAPI_SaveSetting_Handler,
		},
		{
			MethodName: "RegisterQueryCommands",
			Handler:    _PublicAPI_RegisterQueryCommands_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AIChatStream",
			Handler:       _PublicAPI_AIChatStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnSettingChanged",
			Handler:       _PublicAPI_OnSettingChanged_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnGetDynamicSetting",
			Handler:       _PublicAPI_OnGetDynamicSetting_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnDeepLink",
			Handler:       _PublicAPI_OnDeepLink_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "OnUnload",
			Handler:       _PublicAPI_OnUnload_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugin/api.proto",
}
